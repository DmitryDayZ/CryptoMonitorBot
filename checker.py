import asyncio
import logging
from config import TRACKING, POLL_INTERVAL, THRESHOLD_PERCENT
from exchanges.ccxt_client import ExchangeManager
from telegram_bot import send_price_alert

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å, —É—Ä–æ–≤–µ–Ω—å INFO
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

last_prices = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ –∏ –±–∏—Ä–∂–µ
ex = ExchangeManager()  # –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–∞–º–∏ —á–µ—Ä–µ–∑ ccxt

async def check_prices():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –±–∏—Ä–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."""
    global last_prices
    while True:
        for exchange, symbols in TRACKING.items():
            for symbol in symbols:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –ø–æ –±–∏—Ä–∂–µ –∏ —Å–∏–º–≤–æ–ª—É
                    current = ex.fetch_price(exchange, symbol)
                    key = f"{exchange}_{symbol}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã

                    if key in last_prices:
                        old = last_prices[key]
                        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                        diff = abs(current - old) / old * 100
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        direction = "üìà –≤—ã—Ä–æ—Å–ª–∞" if current > old else "üìâ —É–ø–∞–ª–∞"

                        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if diff >= THRESHOLD_PERCENT:
                            logging.info(f"–¶–µ–Ω–∞ –Ω–∞ {exchange} {symbol} {direction}: —Å—Ç–∞—Ä–æ–µ {old}, –Ω–æ–≤–æ–µ {current}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ {diff:.2f}%")
                            await send_price_alert(exchange, symbol, old, current, diff, direction)
                            last_prices[key] = current  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
                        else:
                            # await send_price_alert(exchange, symbol, old, current, diff, direction)
                            logging.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {exchange} {symbol} –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞: {diff:.2f}%")
                    else:
                        # –ï—Å–ª–∏ —Ü–µ–Ω—ã –Ω–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é
                        logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {exchange} {symbol}: {current}")
                        last_prices[key] = current  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ü–µ–Ω—É


                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {exchange} {symbol}: {e}")

        logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–∂–∏–¥–∞–Ω–∏–µ {POLL_INTERVAL} —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(POLL_INTERVAL)
