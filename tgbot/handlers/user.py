import asyncio
import urllib
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

from db.sqlite_module import AsyncSessionLocal, DBManager
from exchanges.ccxt_client import ExchangeManager
from services.checker import emulate_prices
from tgbot.keyboards.inline import very_simple_keyboard

user_router = Router()


@user_router.message(CommandStart())
async def user_start(message: Message):

    await message.answer("‚úÖ –î–µ–ª–∞—é —ç–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏.")
    await emulate_prices()

@user_router.callback_query(F.data == "orders_info")
async def create_order(query: CallbackQuery):
    ex_manager = ExchangeManager()
    total_profit = 0.0
    total_value = 0.0
    price_cache = {}  # üíæ –ö–µ—à –¥–ª—è —Ü–µ–Ω –≤–∏–¥–∞: {"binance:BTC/USDT": 60700.0}

    try:
        async with AsyncSessionLocal() as session:
            db = DBManager(session)
            orders = await db.get_orders()

            if not orders:
                await query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.", parse_mode="HTML", disable_web_page_preview=True,
                                           reply_markup=very_simple_keyboard())

            commission_rate = 0.001
            text_parts = []
            current_chunk = "<b>üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n"

            for o in orders:
                key = f"{o.exchange}:{o.symbol}"
                if key in price_cache:
                    current_price = price_cache[key]
                else:
                    current_price = await ex_manager.fetch_price(o.exchange, o.symbol)
                    price_cache[key] = current_price  # üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à

                value = current_price * o.amount
                total_value += value

                if o.side == "buy" and o.price is not None:
                    profit = (current_price - o.price) * o.amount
                    commission = (o.price * o.amount + current_price * o.amount) * commission_rate
                    side_icon = "üü¢ –õ–æ–Ω–≥"
                elif o.side == "sell" and o.price is not None:
                    profit = (o.price - current_price) * o.amount
                    commission = (o.price * o.amount + current_price * o.amount) * commission_rate
                    side_icon = "üî¥ –®–æ—Ä—Ç"
                else:
                    profit = 0
                    commission = 0
                    side_icon = "‚ö™Ô∏è"

                net_profit = profit - commission
                status_icon = "üü¢" if o.status == "emulated" else "‚ö™Ô∏è"
                date_str = o.created_at.strftime("%Y-%m-%d %H:%M") if getattr(o, "created_at", None) else "‚Äî"
                strategy = o.strategy or "‚Äî"
                order_type = o.order_type or "‚Äî"

                block = (
                    f"<b>{side_icon}</b> <code>{o.symbol}</code> –Ω–∞ <b>{o.exchange.capitalize()}</b>\n"
                    f"<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> <i>{strategy}</i>\n"
                    f"<b>–¢–∏–ø:</b> <i>{order_type}</i> | <b>–°—Ç–∞—Ç—É—Å:</b> <i>{o.status}</i> {status_icon}\n"
                    f"<b>–ö–æ–ª-–≤–æ:</b> <code>{o.amount}</code> @ <b>{o.price}</b>\n"
                    f"<b>–î–∞—Ç–∞:</b> <i>{date_str}</i>\n"
                    f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> <code>{current_price}</code>\n"
                    f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏:</b> <b>{value:.4f} USDT</b>\n"
                    f"<b>–ü—Ä–∏–±—ã–ª—å (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏):</b> <b>{profit:.4f} USDT</b>\n"
                    f"<b>–ö–æ–º–∏—Å—Å–∏—è:</b> <b>{commission:.4f} USDT</b>\n"
                    f"<b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> <b>{net_profit:.4f} USDT</b>\n\n"
                )

                if len(current_chunk) + len(block) > 2000:
                    text_parts.append(current_chunk)
                    current_chunk = block
                else:
                    current_chunk += block

                total_profit += net_profit

            # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –±–ª–æ–∫
            current_chunk += (
                f"<b>üí∞ –û–±—â–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <u>{total_profit:.4f} USDT</u></b>\n"
                f"<b>üì¶ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: <u>{total_value:.4f} USDT</u></b>"
            )
            text_parts.append(current_chunk)

            for part in text_parts:
                is_last = part == text_parts[-1]
                await query.message.answer(
                    part,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=very_simple_keyboard() if is_last else None
                )

    except Exception as e:
        await query.message.answer(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {str(e)}")

    finally:
        await ex_manager.close_all()  # ‚¨ÖÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —É—Ç–µ—á–µ–∫ aiohttp



@user_router.message()
async def echo(msg):
    ex_manager = ExchangeManager()
    total_profit = 0.0
    total_value = 0.0
    price_cache = {}  # üíæ –ö–µ—à –¥–ª—è —Ü–µ–Ω –≤–∏–¥–∞: {"binance:BTC/USDT": 60700.0}

    try:
        async with AsyncSessionLocal() as session:
            db = DBManager(session)
            orders = await db.get_orders()

            if not orders:
                await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.", parse_mode="HTML",
                                           disable_web_page_preview=True,
                                           reply_markup=very_simple_keyboard())

            commission_rate = 0.001
            text_parts = []
            current_chunk = "<b>üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n"

            for o in orders:
                key = f"{o.exchange}:{o.symbol}"
                if key in price_cache:
                    current_price = price_cache[key]
                else:
                    current_price = await ex_manager.fetch_price(o.exchange, o.symbol)
                    price_cache[key] = current_price  # üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à

                value = current_price * o.amount
                total_value += value

                if o.side == "buy" and o.price is not None:
                    profit = (current_price - o.price) * o.amount
                    commission = (o.price * o.amount + current_price * o.amount) * commission_rate
                    side_icon = "üü¢ –õ–æ–Ω–≥"
                elif o.side == "sell" and o.price is not None:
                    profit = (o.price - current_price) * o.amount
                    commission = (o.price * o.amount + current_price * o.amount) * commission_rate
                    side_icon = "üî¥ –®–æ—Ä—Ç"
                else:
                    profit = 0
                    commission = 0
                    side_icon = "‚ö™Ô∏è"

                net_profit = profit - commission
                status_icon = "üü¢" if o.status == "emulated" else "‚ö™Ô∏è"
                date_str = o.created_at.strftime("%Y-%m-%d %H:%M") if getattr(o, "created_at", None) else "‚Äî"
                strategy = o.strategy or "‚Äî"
                order_type = o.order_type or "‚Äî"

                block = (
                    f"<b>{side_icon}</b> <code>{o.symbol}</code> –Ω–∞ <b>{o.exchange.capitalize()}</b>\n"
                    f"<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> <i>{strategy}</i>\n"
                    f"<b>–¢–∏–ø:</b> <i>{order_type}</i> | <b>–°—Ç–∞—Ç—É—Å:</b> <i>{o.status}</i> {status_icon}\n"
                    f"<b>–ö–æ–ª-–≤–æ:</b> <code>{o.amount}</code> @ <b>{o.price}</b>\n"
                    f"<b>–î–∞—Ç–∞:</b> <i>{date_str}</i>\n"
                    f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> <code>{current_price}</code>\n"
                    f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏:</b> <b>{value:.4f} USDT</b>\n"
                    f"<b>–ü—Ä–∏–±—ã–ª—å (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏):</b> <b>{profit:.4f} USDT</b>\n"
                    f"<b>–ö–æ–º–∏—Å—Å–∏—è:</b> <b>{commission:.4f} USDT</b>\n"
                    f"<b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> <b>{net_profit:.4f} USDT</b>\n\n"
                )

                if len(current_chunk) + len(block) > 2000:
                    text_parts.append(current_chunk)
                    current_chunk = block
                else:
                    current_chunk += block

                total_profit += net_profit

            # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –±–ª–æ–∫
            current_chunk += (
                f"<b>üí∞ –û–±—â–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <u>{total_profit:.4f} USDT</u></b>\n"
                f"<b>üì¶ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: <u>{total_value:.4f} USDT</u></b>"
            )
            text_parts.append(current_chunk)

            for part in text_parts:
                is_last = part == text_parts[-1]
                await msg.answer(
                    part,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=very_simple_keyboard() if is_last else None
                )

    except Exception as e:
        await msg.answer(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {str(e)}")

    finally:
        await ex_manager.close_all()  # ‚¨ÖÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —É—Ç–µ—á–µ–∫ aiohttp







