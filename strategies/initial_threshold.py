import logging
import time


class InitialThresholdStrategy:
    def __init__(self, threshold_percent: float):
        """
        :param threshold_percent: –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.
        """
        self.threshold_percent = threshold_percent
        self.initial_prices = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω { (exchange, symbol): price }

    async def check(self, exchange, symbol, current):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–æ —Å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.

        :param exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'binance')
        :param symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT')
        :param current: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞
        :return: –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        key = (exchange, symbol)

        # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if key not in self.initial_prices:
            self.initial_prices[key] = {"price":current,"up_checked": False, "down_checked":False}
            return []
        action= "none"
        initial = self.initial_prices[key]["price"]
        up_checked = self.initial_prices[key]["up_checked"]
        down_checked = self.initial_prices[key]["down_checked"]

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if initial == 0 or (up_checked and down_checked):
            return []

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        diff = abs(current - initial) / initial * 100
        # logging.info(f"InitialThresholdStrategy: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {diff:.2f}% –¥–ª—è {exchange} {symbol}")

        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
        if diff >= self.threshold_percent:
            self.initial_prices[key] = {"price": current, "up_checked": False, "down_checked": False}
            if current > initial:
                direction = "üìà –≤—ã—Ä–æ—Å–ª–∞"
                action = "sell"

            else:
                direction = "üìâ —É–ø–∞–ª–∞"
                action = "buy"

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–ª–µ—Ä—Ç–µ
            return [{
                "exchange": exchange,
                "pair": symbol,
                "old": initial,
                "new": current,
                "diff": diff,
                "direction": direction,
                "strategy": f"InitialThresholdStrategy ({self.threshold_percent}%)",
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "action": action,
            }]

        # –ò–Ω–∞—á–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []

    async def check_old(self, exchange, symbol, current):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–æ —Å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.

        :param exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'binance')
        :param symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT')
        :param current: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞
        :return: –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        key = (exchange, symbol)

        # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if key not in self.initial_prices:
            self.initial_prices[key] = {"price":current,"up_checked": False, "down_checked":False}
            return []
        action= "none"
        initial = self.initial_prices[key]["price"]
        up_checked = self.initial_prices[key]["up_checked"]
        down_checked = self.initial_prices[key]["down_checked"]

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if initial == 0 or (up_checked and down_checked):
            return []

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        diff = abs(current - initial) / initial * 100
        # logging.info(f"InitialThresholdStrategy: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {diff:.2f}% –¥–ª—è {exchange} {symbol}")

        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
        if diff >= self.threshold_percent:
            if current > initial:
                direction = "üìà –≤—ã—Ä–æ—Å–ª–∞"
                if not self.initial_prices[key]["up_checked"]:
                    self.initial_prices[key]["up_checked"] = True
                    action="sell"
            else:
                direction = "üìâ —É–ø–∞–ª–∞"
                if not self.initial_prices[key]["down_checked"]:
                    self.initial_prices[key]["down_checked"] = True
                    action = "buy"

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–ª–µ—Ä—Ç–µ
            return [{
                "exchange": exchange,
                "pair": symbol,
                "old": initial,
                "new": current,
                "diff": diff,
                "direction": direction,
                "strategy": f"InitialThresholdStrategy ({self.threshold_percent}%)",
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "action": action,
            }]

        # –ò–Ω–∞—á–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []
